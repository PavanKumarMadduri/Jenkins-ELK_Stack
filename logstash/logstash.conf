# Sample Logstash configuration for creating a simple
# Beats -> Logstash -> Elasticsearch pipeline.

input {
  beats {
    port => 5044
  }
}

filter {

  grok {
	match => { "[log][file][path]" => "(?<build_number>([\d]*(?=\/log)))" }
  }
  grok {
	match => { "message" => "(?<user_name>(?<=(Started by GitHub push by)\s)[\w\d_]*)" }
  }
  grok {
        match => { "message" => "(?<repository>(?<=(Obtained Jenkinsfile from git)\s)[\w:\/.-]*)" }
  }
  grok {
        match => { "message" => "(?<revision_number>(?<=(git checkout -f)\s)[\w]*)" }
  }
  grok {
        match => { "message" => "(?<result>(?<=(Finished:)\s)[\w]*)" }
  }
  grok {
        match => { "message" => '(?<commit_message>(?<=(Commit message:)\s)[\w\s."-]*)' }
  }
  grok {
        match => { "[log][file][path]" => "(?<project_name>(?<=[\/$])[\w-]*(?=/builds/[\d]*/log))" }
  }
  grok {
	match => { "message" => "(?<pipeline_name>(?<=(\[Pipeline\]\s\{\s\())[\w]*(?=\)))" }
  }
  grok {
	match => { "message" => "(?<pipeline_command>(?<=(\+\s))[\w\s\._\/]*(?=\n))"}
  }
  grok {
	match => { "message" => "(?<pipeline_info>(?<=\n\+)[\w\W]*(?=(\n[\w\W]*\[Pipeline\](\s\})+)))" }
  }

 mutate {
	remove_field => ["agent", "cloud", "host"]
 } 
 mutate {
	add_field => { "[pipeline][name]" => "%{[pipeline_name]}"}
  }
 if [pipeline][name] == "%{[pipeline_name]}"  {

	mutate {
		remove_field => ["pipeline"]
	}
 }

  else {
	mutate {
		add_field => { "[pipeline][%{[pipeline_name]}][command]" => "%{[pipeline_command]}"}
		add_field => { "[pipeline][%{[pipeline_name]}][info]" => "%{[pipeline_info]}"}
	}
  }
}

output {
  elasticsearch {
    hosts => ["http://elasticsearch:9200"]
    index => "%{[project_name]}-%{[build_number]}"
    #index => "%{[project_name]}-%{[@metadata][build_number]}"
    #index => "%{[@metadata][beat]}"
    ##user => "elastic"
    #password => "changeme"
  }

  stdout {
    codec => rubydebug {
      metadata => true
    }
  }

}

